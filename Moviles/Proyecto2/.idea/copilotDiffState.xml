<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/proyecto1/ui/pantallaDetalles/DetalleMainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/proyecto1/ui/pantallaDetalles/DetalleMainActivity.kt" />
              <option name="originalContent" value="package com.example.proyecto1.ui.pantallaDetalles&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.viewModels&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import com.example.proyecto1.R&#10;import com.example.proyecto1.databinding.ActivityDetalleMainBinding&#10;import com.example.proyecto1.domain.modelo.Tipo&#10;import com.example.proyecto1.domain.usecases.ActualizarSerieUsecase&#10;import com.example.proyecto1.domain.usecases.DeleteSerieUsecase&#10;import com.example.proyecto1.domain.usecases.GetSeriesUseCase&#10;import com.example.proyecto1.ui.commons.UIEvent&#10;import com.example.proyecto1.ui.listadoSerie.ListadoSeriesActivity&#10;import com.google.android.material.snackbar.Snackbar&#10;&#10;class DetalleMainActivity : AppCompatActivity() {&#10;    private lateinit var binding : ActivityDetalleMainBinding&#10;    private val viewModel: DetalleSerieViewModel by viewModels{&#10;        DetalleViewModelFactory(&#10;            GetSeriesUseCase(),&#10;            DeleteSerieUsecase(),&#10;            ActualizarSerieUsecase()&#10;        )&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        binding = ActivityDetalleMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        intent.extras?.let {&#10;            val titulo = intent.getStringExtra(&quot;Titulo&quot;) ?: &quot;&quot;&#10;            viewModel.getSeries(titulo)&#10;        }&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;        eventos()&#10;        observer()&#10;    }&#10;&#10;    private fun observer(){&#10;        viewModel.uiState.observe(this) { state -&gt;&#10;            state?.let {&#10;                it.event?.let { event -&gt;&#10;                    when(event){&#10;                        is UIEvent.showSnackbar -&gt; {&#10;                            Snackbar.make(binding.root, event.message, Snackbar.LENGTH_LONG).show()&#10;                        }&#10;                    }&#10;                    viewModel.limpiarEvento()&#10;                }&#10;                if (it.event == null){&#10;                    with(binding) {&#10;                        tituloSerie.setText(it.serie.titulo)&#10;                        genero.setText(it.serie.textoGenero)&#10;                        temporadas.setText(it.serie.numeroTemporadas.toString())&#10;                        anioEstreno.setText(it.serie.anoEstreno.toString())&#10;                        ultimaEmision.setText(it.serie.ultimaEmision)&#10;                        sinopsis.setText(it.serie.textoSinopsis)&#10;                        terminos.isChecked = it.serie.isAceptado&#10;&#10;                        when(it.serie.estadoSerie) {&#10;                            Tipo.EnEmision -&gt; enEmision.isChecked = true&#10;                            Tipo.Finalizada -&gt; finalizada.isChecked = true&#10;                            Tipo.Proximamtente -&gt; proximamente.isChecked = true&#10;                            else -&gt; {}&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;    private fun eventos(){&#10;        with(binding){&#10;            btnBorrar.setOnClickListener {&#10;                viewModel.uiState.value?.serie?.let { serie -&gt;&#10;                    viewModel.clickBorrar(serie)&#10;                    val intent = Intent(this@DetalleMainActivity, ListadoSeriesActivity::class.java)&#10;                    startActivity(intent)&#10;                }&#10;            }&#10;            btnActualizar.setOnClickListener {&#10;                // Leer los valores actualizados del formulario&#10;                val tituloActualizado = tituloSerie.text.toString()&#10;                val generoActualizado = genero.text.toString()&#10;                val temporadasActualizadas = temporadas.text.toString().toIntOrNull() ?: 0&#10;                val anioEstrenoActualizado = anioEstreno.text.toString().toIntOrNull() ?: 0&#10;                val ultimaEmisionActualizada = ultimaEmision.text.toString()&#10;                val sinopsisActualizada = sinopsis.text.toString()&#10;                val terminosAceptados = terminos.isChecked&#10;                &#10;                // Determinar el estado segÃºn el radio button seleccionado&#10;                val estadoActualizado = when {&#10;                    enEmision.isChecked -&gt; com.example.proyecto1.domain.modelo.Tipo.EnEmision&#10;                    finalizada.isChecked -&gt; com.example.proyecto1.domain.modelo.Tipo.Finalizada&#10;                    proximamente.isChecked -&gt; com.example.proyecto1.domain.modelo.Tipo.Proximamtente&#10;                    else -&gt; com.example.proyecto1.domain.modelo.Tipo.VACIO&#10;                }&#10;                &#10;                // Crear la serie actualizada con los nuevos valores&#10;                val serieActualizada = com.example.proyecto1.domain.modelo.Serie(&#10;                    titulo = tituloActualizado,&#10;                    textoGenero = generoActualizado,&#10;                    numeroTemporadas = temporadasActualizadas,&#10;                    anoEstreno = anioEstrenoActualizado,&#10;                    ultimaEmision = ultimaEmisionActualizada,&#10;                    textoSinopsis = sinopsisActualizada,&#10;                    isAceptado = terminosAceptados,&#10;                    estadoSerie = estadoActualizado&#10;                )&#10;                &#10;                viewModel.clickActualizarSerie(serieActualizada)&#10;                val intent = Intent(this@DetalleMainActivity, ListadoSeriesActivity::class.java)&#10;                startActivity(intent)&#10;            }&#10;            btnVolver.setOnClickListener {&#10;                val intent = Intent(this@DetalleMainActivity, ListadoSeriesActivity::class.java)&#10;                startActivity(intent)&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.proyecto1.ui.pantallaDetalles&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.viewModels&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import com.example.proyecto1.R&#10;import com.example.proyecto1.databinding.ActivityDetalleMainBinding&#10;import com.example.proyecto1.domain.modelo.Tipo&#10;import com.example.proyecto1.domain.usecases.ActualizarSerieUsecase&#10;import com.example.proyecto1.domain.usecases.DeleteSerieUsecase&#10;import com.example.proyecto1.domain.usecases.GetSeriesUseCase&#10;import com.example.proyecto1.ui.commons.UIEvent&#10;import com.example.proyecto1.ui.listadoSerie.ListadoSeriesActivity&#10;import com.google.android.material.snackbar.Snackbar&#10;&#10;class DetalleMainActivity : AppCompatActivity() {&#10;    private lateinit var binding : ActivityDetalleMainBinding&#10;    private val viewModel: DetalleSerieViewModel by viewModels{&#10;        DetalleViewModelFactory(&#10;            GetSeriesUseCase(),&#10;            DeleteSerieUsecase(),&#10;            ActualizarSerieUsecase()&#10;        )&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        binding = ActivityDetalleMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        intent.extras?.let {&#10;            val titulo = intent.getStringExtra(&quot;Titulo&quot;) ?: &quot;&quot;&#10;            viewModel.getSeries(titulo)&#10;        }&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets -&gt;&#10;            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)&#10;            insets&#10;        }&#10;        eventos()&#10;        observer()&#10;    }&#10;&#10;    private fun observer(){&#10;        viewModel.uiState.observe(this) { state -&gt;&#10;            state?.let {&#10;                it.event?.let { event -&gt;&#10;                    when(event){&#10;                        is UIEvent.showSnackbar -&gt; {&#10;                            Snackbar.make(binding.root, event.message, Snackbar.LENGTH_LONG).show()&#10;                        }&#10;                    }&#10;                    viewModel.limpiarEvento()&#10;                }&#10;                if (it.event == null){&#10;                    with(binding) {&#10;                        tituloSerie.setText(it.serie.titulo)&#10;                        genero.setText(it.serie.textoGenero)&#10;                        temporadas.setText(it.serie.numeroTemporadas.toString())&#10;                        anioEstreno.setText(it.serie.anoEstreno.toString())&#10;                        ultimaEmision.setText(it.serie.ultimaEmision)&#10;                        sinopsis.setText(it.serie.textoSinopsis)&#10;                        terminos.isChecked = it.serie.isAceptado&#10;&#10;                        when(it.serie.estadoSerie) {&#10;                            Tipo.EnEmision -&gt; enEmision.isChecked = true&#10;                            Tipo.Finalizada -&gt; finalizada.isChecked = true&#10;                            Tipo.Proximamtente -&gt; proximamente.isChecked = true&#10;                            else -&gt; {}&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;    private fun eventos(){&#10;        with(binding){&#10;            btnBorrar.setOnClickListener {&#10;                viewModel.uiState.value?.serie?.let { serie -&gt;&#10;                    viewModel.clickBorrar(serie)&#10;                    val intent = Intent(this@DetalleMainActivity, ListadoSeriesActivity::class.java)&#10;                    startActivity(intent)&#10;                }&#10;            }&#10;            btnActualizar.setOnClickListener {&#10;                // Leer los valores actualizados del formulario&#10;                val tituloActualizado = tituloSerie.text.toString()&#10;                val generoActualizado = genero.text.toString()&#10;                val temporadasActualizadas = temporadas.text.toString().toIntOrNull() ?: 0&#10;                val anioEstrenoActualizado = anioEstreno.text.toString().toIntOrNull() ?: 0&#10;                val ultimaEmisionActualizada = ultimaEmision.text.toString()&#10;                val sinopsisActualizada = sinopsis.text.toString()&#10;                val terminosAceptados = terminos.isChecked&#10;                &#10;                // Determinar el estado segÃºn el radio button seleccionado&#10;                val estadoActualizado = when {&#10;                    enEmision.isChecked -&gt; com.example.proyecto1.domain.modelo.Tipo.EnEmision&#10;                    finalizada.isChecked -&gt; com.example.proyecto1.domain.modelo.Tipo.Finalizada&#10;                    proximamente.isChecked -&gt; com.example.proyecto1.domain.modelo.Tipo.Proximamtente&#10;                    else -&gt; com.example.proyecto1.domain.modelo.Tipo.VACIO&#10;                }&#10;                &#10;                // Crear la serie actualizada con los nuevos valores&#10;                val serieActualizada = com.example.proyecto1.domain.modelo.Serie(&#10;                    titulo = tituloActualizado,&#10;                    textoGenero = generoActualizado,&#10;                    numeroTemporadas = temporadasActualizadas,&#10;                    anoEstreno = anioEstrenoActualizado,&#10;                    ultimaEmision = ultimaEmisionActualizada,&#10;                    textoSinopsis = sinopsisActualizada,&#10;                    isAceptado = terminosAceptados,&#10;                    estadoSerie = estadoActualizado&#10;                )&#10;                &#10;                viewModel.clickActualizarSerie(serieActualizada)&#10;                val intent = Intent(this@DetalleMainActivity, ListadoSeriesActivity::class.java)&#10;                startActivity(intent)&#10;            }&#10;            btnVolver.setOnClickListener {&#10;                val intent = Intent(this@DetalleMainActivity, ListadoSeriesActivity::class.java)&#10;                startActivity(intent)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>