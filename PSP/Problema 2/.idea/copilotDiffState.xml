<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/CuentaBancariaLock.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/CuentaBancariaLock.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;import java.util.List;&#10;import java.util.concurrent.locks.Lock;&#10;import java.util.concurrent.locks.ReentrantLock;&#10;&#10;public class CuentaBancariaLock implements ICuentaBancaria{&#10;&#10;    private CuentaBancaria cuentaBancaria;&#10;    Lock lock = new ReentrantLock();&#10;    &#10;    public CuentaBancariaLock() {&#10;        this.cuentaBancaria = new CuentaBancaria();&#10;    }&#10;&#10;    @Override&#10;    public boolean retiroDinero(double monto) {&#10;        lock.lock();&#10;        try {&#10;            if (monto &lt;= cuentaBancaria.getSaldo()) {&#10;                cuentaBancaria.setSaldo(cuentaBancaria.getSaldo() - monto);&#10;                int sumaNueva = cuentaBancaria.getTransaccionesExitosas() + 1;&#10;                cuentaBancaria.setTransaccionesExitosas(sumaNueva);&#10;                cuentaBancaria.getHistorialTransacciones().add(&quot;Retiro de: &quot; + monto);&#10;                return true;&#10;            } else {&#10;                int sumaNueva = cuentaBancaria.getTransaccionesFallidas() + 1;&#10;                cuentaBancaria.setTransaccionesFallidas(sumaNueva);&#10;                cuentaBancaria.getHistorialTransacciones().add(&quot;Fallo en retiro de: &quot; + monto);&#10;                return false;&#10;            }&#10;        } finally {&#10;            lock.unlock();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void ingresoDinero(double monto) {&#10;        lock.lock();&#10;        try{&#10;            cuentaBancaria.setSaldo(cuentaBancaria.getSaldo() + monto);&#10;            int sumaNueva = cuentaBancaria.getTransaccionesExitosas() + 1;&#10;            cuentaBancaria.setTransaccionesExitosas(sumaNueva);&#10;            cuentaBancaria.getHistorialTransacciones().add(&quot;Ingreso de: &quot; + monto);&#10;        } finally{&#10;            lock.unlock();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public double getSaldoActual() {&#10;        return cuentaBancaria.getSaldo();&#10;    }&#10;&#10;    @Override&#10;    public List&lt;String&gt; historialTransacciones() {&#10;        return cuentaBancaria.getHistorialTransacciones();&#10;    }&#10;&#10;    @Override&#10;    public int TransaccionesExitosas() {&#10;        return cuentaBancaria.getTransaccionesExitosas();&#10;    }&#10;&#10;    @Override&#10;    public int TransaccionesFallidas() {&#10;        return cuentaBancaria.getTransaccionesFallidas();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import java.util.List;&#10;import java.util.concurrent.locks.Lock;&#10;import java.util.concurrent.locks.ReentrantLock;&#10;&#10;public class CuentaBancariaLock implements ICuentaBancaria{&#10;&#10;    private CuentaBancaria cuentaBancaria;&#10;    Lock lock = new ReentrantLock();&#10;    &#10;    public CuentaBancariaLock() {&#10;        this.cuentaBancaria = new CuentaBancaria();&#10;    }&#10;&#10;    @Override&#10;    public boolean retiroDinero(double monto) {&#10;        lock.lock();&#10;        try {&#10;            if (monto &lt;= cuentaBancaria.getSaldo()) {&#10;                cuentaBancaria.setSaldo(cuentaBancaria.getSaldo() - monto);&#10;                int sumaNueva = cuentaBancaria.getTransaccionesExitosas() + 1;&#10;                cuentaBancaria.setTransaccionesExitosas(sumaNueva);&#10;                cuentaBancaria.getHistorialTransacciones().add(&quot;Retiro de: &quot; + monto);&#10;                return true;&#10;            } else {&#10;                int sumaNueva = cuentaBancaria.getTransaccionesFallidas() + 1;&#10;                cuentaBancaria.setTransaccionesFallidas(sumaNueva);&#10;                cuentaBancaria.getHistorialTransacciones().add(&quot;Fallo en retiro de: &quot; + monto);&#10;                return false;&#10;            }&#10;        } finally {&#10;            lock.unlock();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void ingresoDinero(double monto) {&#10;        lock.lock();&#10;        try{&#10;            cuentaBancaria.setSaldo(cuentaBancaria.getSaldo() + monto);&#10;            int sumaNueva = cuentaBancaria.getTransaccionesExitosas() + 1;&#10;            cuentaBancaria.setTransaccionesExitosas(sumaNueva);&#10;            cuentaBancaria.getHistorialTransacciones().add(&quot;Ingreso de: &quot; + monto);&#10;        } finally{&#10;            lock.unlock();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public double getSaldoActual() {&#10;        return cuentaBancaria.getSaldo();&#10;    }&#10;&#10;    @Override&#10;    public List&lt;String&gt; historialTransacciones() {&#10;        return cuentaBancaria.getHistorialTransacciones();&#10;    }&#10;&#10;    @Override&#10;    public int TransaccionesExitosas() {&#10;        return cuentaBancaria.getTransaccionesExitosas();&#10;    }&#10;&#10;    @Override&#10;    public int TransaccionesFallidas() {&#10;        return cuentaBancaria.getTransaccionesFallidas();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/CuentaBancariaSyn.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/CuentaBancariaSyn.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;import java.util.List;&#10;&#10;public class CuentaBancariaSyn implements ICuentaBancaria {&#10;    private CuentaBancaria cuentaBancaria;&#10;    &#10;    public CuentaBancariaSyn() {&#10;        this.cuentaBancaria = new CuentaBancaria();&#10;    }&#10;&#10;    @Override&#10;    public synchronized boolean retiroDinero(double monto) {&#10;        boolean a = false;&#10;        if (monto &lt;= cuentaBancaria.getSaldo()) {&#10;            cuentaBancaria.setSaldo(cuentaBancaria.getSaldo() - monto);&#10;            int sumaNueva = cuentaBancaria.getTransaccionesExitosas() + 1;&#10;            cuentaBancaria.setTransaccionesExitosas(sumaNueva);&#10;            cuentaBancaria.getHistorialTransacciones().add(&quot;Retiro de: &quot; + monto);&#10;            a = true;&#10;        } else {&#10;            int sumaNueva = cuentaBancaria.getTransaccionesFallidas() + 1;&#10;            cuentaBancaria.setTransaccionesFallidas(sumaNueva);&#10;            cuentaBancaria.getHistorialTransacciones().add(&quot;Fallo en retiro de: &quot; + monto);&#10;        }&#10;        return a;&#10;    }&#10;&#10;    @Override&#10;    public synchronized void ingresoDinero(double monto) {&#10;        cuentaBancaria.setSaldo(cuentaBancaria.getSaldo() + monto);&#10;        int sumaNueva = cuentaBancaria.getTransaccionesExitosas() + 1;&#10;        cuentaBancaria.setTransaccionesExitosas(sumaNueva);&#10;        cuentaBancaria.getHistorialTransacciones().add(&quot;Ingreso de: &quot; + monto);&#10;    }&#10;&#10;    @Override&#10;    public double getSaldoActual() {&#10;        return cuentaBancaria.getSaldo();&#10;    }&#10;&#10;    @Override&#10;    public List&lt;String&gt; historialTransacciones() {&#10;        return cuentaBancaria.getHistorialTransacciones();&#10;    }&#10;&#10;    @Override&#10;    public int TransaccionesExitosas() {&#10;        return cuentaBancaria.getTransaccionesExitosas();&#10;    }&#10;&#10;    @Override&#10;    public int TransaccionesFallidas() {&#10;        return cuentaBancaria.getTransaccionesFallidas();&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import java.util.List;&#10;&#10;public class CuentaBancariaSyn implements ICuentaBancaria {&#10;    private CuentaBancaria cuentaBancaria;&#10;    &#10;    public CuentaBancariaSyn() {&#10;        this.cuentaBancaria = new CuentaBancaria();&#10;    }&#10;&#10;    @Override&#10;    public synchronized boolean retiroDinero(double monto) {&#10;        boolean a = false;&#10;        if (monto &lt;= cuentaBancaria.getSaldo()) {&#10;            cuentaBancaria.setSaldo(cuentaBancaria.getSaldo() - monto);&#10;            int sumaNueva = cuentaBancaria.getTransaccionesExitosas() + 1;&#10;            cuentaBancaria.setTransaccionesExitosas(sumaNueva);&#10;            cuentaBancaria.getHistorialTransacciones().add(&quot;Retiro de: &quot; + monto);&#10;            a = true;&#10;        } else {&#10;            int sumaNueva = cuentaBancaria.getTransaccionesFallidas() + 1;&#10;            cuentaBancaria.setTransaccionesFallidas(sumaNueva);&#10;            cuentaBancaria.getHistorialTransacciones().add(&quot;Fallo en retiro de: &quot; + monto);&#10;        }&#10;        return a;&#10;    }&#10;&#10;    @Override&#10;    public synchronized void ingresoDinero(double monto) {&#10;        cuentaBancaria.setSaldo(cuentaBancaria.getSaldo() + monto);&#10;        int sumaNueva = cuentaBancaria.getTransaccionesExitosas() + 1;&#10;        cuentaBancaria.setTransaccionesExitosas(sumaNueva);&#10;        cuentaBancaria.getHistorialTransacciones().add(&quot;Ingreso de: &quot; + monto);&#10;    }&#10;&#10;    @Override&#10;    public double getSaldoActual() {&#10;        return cuentaBancaria.getSaldo();&#10;    }&#10;&#10;    @Override&#10;    public List&lt;String&gt; historialTransacciones() {&#10;        return cuentaBancaria.getHistorialTransacciones();&#10;    }&#10;&#10;    @Override&#10;    public int TransaccionesExitosas() {&#10;        return cuentaBancaria.getTransaccionesExitosas();&#10;    }&#10;&#10;    @Override&#10;    public int TransaccionesFallidas() {&#10;        return cuentaBancaria.getTransaccionesFallidas();&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>